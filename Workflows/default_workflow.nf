// This workflow was automatically generated by the operandi_utils.oton module
nextflow.enable.dsl = 2

params.input_file_group = "OCR-D-IMG"
params.mets_path = "null"
params.workspace_dir = "null"
params.pages = "null"
params.cpus = "null"
params.ram = "null"
params.forks = params.cpus
params.cpus_per_fork = (params.cpus.toInteger() / params.forks.toInteger()).intValue()
params.ram_per_fork = sprintf("%dGB", (params.ram.toInteger() / params.forks.toInteger()).intValue())
params.env_wrapper_cmd_core = "null"
params.env_wrapper_cmd_step0 = "null"
params.env_wrapper_cmd_step1 = "null"
params.env_wrapper_cmd_step2 = "null"
params.env_wrapper_cmd_step3 = "null"
params.env_wrapper_cmd_step4 = "null"
params.env_wrapper_cmd_step5 = "null"
params.env_wrapper_cmd_step6 = "null"
params.env_wrapper_cmd_step7 = "null"

log.info """\
    OPERANDI HPC - Nextflow Workflow
    ===================================================
    input_file_group: ${params.input_file_group}
    mets_path: ${params.mets_path}
    workspace_dir: ${params.workspace_dir}
    pages: ${params.pages}
    cpus: ${params.cpus}
    ram: ${params.ram}
    forks: ${params.forks}
    cpus_per_fork: ${params.cpus_per_fork}
    ram_per_fork: ${params.ram_per_fork}
    env_wrapper_cmd_core: ${params.env_wrapper_cmd_core}
    env_wrapper_cmd_step0: ${params.env_wrapper_cmd_step0}
    env_wrapper_cmd_step1: ${params.env_wrapper_cmd_step1}
    env_wrapper_cmd_step2: ${params.env_wrapper_cmd_step2}
    env_wrapper_cmd_step3: ${params.env_wrapper_cmd_step3}
    env_wrapper_cmd_step4: ${params.env_wrapper_cmd_step4}
    env_wrapper_cmd_step5: ${params.env_wrapper_cmd_step5}
    env_wrapper_cmd_step6: ${params.env_wrapper_cmd_step6}
    env_wrapper_cmd_step7: ${params.env_wrapper_cmd_step7}
    """.stripIndent()

process split_page_ranges {
    debug true
    maxForks params.forks
    cpus params.cpus_per_fork
    memory params.ram_per_fork

    input:
        val range_multiplier

    output:
        env mets_file_chunk
        env current_range_pages

    script:
        """
        current_range_pages=\$(${params.env_wrapper_cmd_core} ocrd workspace -d ${params.workspace_dir} list-page -f comma-separated -D ${params.forks} -C ${range_multiplier})
        echo "Current range is: \$current_range_pages"
        mets_file_chunk=\$(echo ${params.workspace_dir}/mets_${range_multiplier}.xml)
        echo "Mets file chunk path: \$mets_file_chunk"
        \$(${params.env_wrapper_cmd_core} cp -p ${params.mets_path} \$mets_file_chunk)
        """
}

process ocrd_cis_ocropy_binarize_0 {
    debug true
    maxForks params.forks
    cpus params.cpus_per_fork
    memory params.ram_per_fork

    input:
        val mets_path
        val page_range
        val input_group
        val output_group

    output:
        val mets_path
        val page_range

    script:
        """
        ${params.env_wrapper_cmd_step0} ocrd-cis-ocropy-binarize -w ${params.workspace_dir} -m ${mets_path} --page-id ${page_range} -I ${input_group} -O ${output_group}
        """
}

process ocrd_anybaseocr_crop_1 {
    debug true
    maxForks params.forks
    cpus params.cpus_per_fork
    memory params.ram_per_fork

    input:
        val mets_path
        val page_range
        val input_group
        val output_group

    output:
        val mets_path
        val page_range

    script:
        """
        ${params.env_wrapper_cmd_step1} ocrd-anybaseocr-crop -w ${params.workspace_dir} -m ${mets_path} --page-id ${page_range} -I ${input_group} -O ${output_group}
        """
}

process ocrd_skimage_binarize_2 {
    debug true
    maxForks params.forks
    cpus params.cpus_per_fork
    memory params.ram_per_fork

    input:
        val mets_path
        val page_range
        val input_group
        val output_group

    output:
        val mets_path
        val page_range

    script:
        """
        ${params.env_wrapper_cmd_step2} ocrd-skimage-binarize -w ${params.workspace_dir} -m ${mets_path} --page-id ${page_range} -I ${input_group} -O ${output_group} -p '{"method": "li"}'
        """
}

process ocrd_skimage_denoise_3 {
    debug true
    maxForks params.forks
    cpus params.cpus_per_fork
    memory params.ram_per_fork

    input:
        val mets_path
        val page_range
        val input_group
        val output_group

    output:
        val mets_path
        val page_range

    script:
        """
        ${params.env_wrapper_cmd_step3} ocrd-skimage-denoise -w ${params.workspace_dir} -m ${mets_path} --page-id ${page_range} -I ${input_group} -O ${output_group} -p '{"level-of-operation": "page"}'
        """
}

process ocrd_tesserocr_deskew_4 {
    debug true
    maxForks params.forks
    cpus params.cpus_per_fork
    memory params.ram_per_fork

    input:
        val mets_path
        val page_range
        val input_group
        val output_group

    output:
        val mets_path
        val page_range

    script:
        """
        ${params.env_wrapper_cmd_step4} ocrd-tesserocr-deskew -w ${params.workspace_dir} -m ${mets_path} --page-id ${page_range} -I ${input_group} -O ${output_group} -p '{"operation_level": "page"}'
        """
}

process ocrd_cis_ocropy_segment_5 {
    debug true
    maxForks params.forks
    cpus params.cpus_per_fork
    memory params.ram_per_fork

    input:
        val mets_path
        val page_range
        val input_group
        val output_group

    output:
        val mets_path
        val page_range

    script:
        """
        ${params.env_wrapper_cmd_step5} ocrd-cis-ocropy-segment -w ${params.workspace_dir} -m ${mets_path} --page-id ${page_range} -I ${input_group} -O ${output_group} -p '{"level-of-operation": "page"}'
        """
}

process ocrd_cis_ocropy_dewarp_6 {
    debug true
    maxForks params.forks
    cpus params.cpus_per_fork
    memory params.ram_per_fork

    input:
        val mets_path
        val page_range
        val input_group
        val output_group

    output:
        val mets_path
        val page_range

    script:
        """
        ${params.env_wrapper_cmd_step6} ocrd-cis-ocropy-dewarp -w ${params.workspace_dir} -m ${mets_path} --page-id ${page_range} -I ${input_group} -O ${output_group}
        """
}

process ocrd_calamari_recognize_7 {
    debug true
    maxForks params.forks
    cpus params.cpus_per_fork
    memory params.ram_per_fork

    input:
        val mets_path
        val page_range
        val input_group
        val output_group

    output:
        val mets_path
        val page_range

    script:
        """
        ${params.env_wrapper_cmd_step7} ocrd-calamari-recognize -w ${params.workspace_dir} -m ${mets_path} --page-id ${page_range} -I ${input_group} -O ${output_group} -p '{"checkpoint_dir": "qurator-gt4histocr-1.0"}'
        """
}

process merging_mets {
    debug true
    maxForks 1
    cpus params.cpus_per_fork
    memory params.ram_per_fork

    input:
        val mets_file_chunk
        val page_range

    script:
        """
        ${params.env_wrapper_cmd_core} ocrd workspace -d ${params.workspace_dir} merge --force --no-copy-files ${mets_file_chunk} --page-id ${page_range}
        ${params.env_wrapper_cmd_core} rm ${mets_file_chunk}
        """
}

workflow {
    main:
        ch_range_multipliers = Channel.of(0..params.forks.intValue()-1)
        split_page_ranges(ch_range_multipliers)
        ocrd_cis_ocropy_binarize_0(split_page_ranges.out[0], split_page_ranges.out[1], params.input_file_group, "OCR-D-BIN")
        ocrd_anybaseocr_crop_1(ocrd_cis_ocropy_binarize_0.out[0], ocrd_cis_ocropy_binarize_0.out[1], "OCR-D-BIN", "OCR-D-CROP")
        ocrd_skimage_binarize_2(ocrd_anybaseocr_crop_1.out[0], ocrd_anybaseocr_crop_1.out[1], "OCR-D-CROP", "OCR-D-BIN2")
        ocrd_skimage_denoise_3(ocrd_skimage_binarize_2.out[0], ocrd_skimage_binarize_2.out[1], "OCR-D-BIN2", "OCR-D-BIN-DENOISE")
        ocrd_tesserocr_deskew_4(ocrd_skimage_denoise_3.out[0], ocrd_skimage_denoise_3.out[1], "OCR-D-BIN-DENOISE", "OCR-D-BIN-DENOISE-DESKEW")
        ocrd_cis_ocropy_segment_5(ocrd_tesserocr_deskew_4.out[0], ocrd_tesserocr_deskew_4.out[1], "OCR-D-BIN-DENOISE-DESKEW", "OCR-D-SEG")
        ocrd_cis_ocropy_dewarp_6(ocrd_cis_ocropy_segment_5.out[0], ocrd_cis_ocropy_segment_5.out[1], "OCR-D-SEG", "OCR-D-SEG-LINE-RESEG-DEWARP")
        ocrd_calamari_recognize_7(ocrd_cis_ocropy_dewarp_6.out[0], ocrd_cis_ocropy_dewarp_6.out[1], "OCR-D-SEG-LINE-RESEG-DEWARP", "OCR-D-OCR")
        merging_mets(ocrd_calamari_recognize_7.out[0], ocrd_calamari_recognize_7.out[1])
}
